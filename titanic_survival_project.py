# -*- coding: utf-8 -*-
"""Titanic survival project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1889T0LcMn82iBrkQsfDLlULyHX4pne6X
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

t_data=pd.read_csv('/content/tested.csv')

"""Data Pre-Processing"""

t_data.head()

t_data.shape

t_data.info()

t_data.isnull().sum()

t_data=t_data.drop(columns='Cabin',axis=1)
t_data['Age'].fillna(t_data['Age'].mean(),inplace=True)
t_data['Fare'].fillna(t_data['Fare'].mean(),inplace=True)

t_data.isnull().sum()

t_data.describe()

"""Data Visualization"""

sns.set()

t_data['Survived'].value_counts()

sns.countplot(x='Survived', data=t_data)
plt.title('Distribution of Survival')

t_data['Sex'].value_counts()

sns.countplot(x='Sex', data=t_data)
plt.title('Distribution of Gender')

sns.countplot(x='Sex',hue='Survived',data=t_data)
plt.title("Survival by Gender")

plt.hist(t_data['Age'], bins=20,edgecolor='black', color='skyblue')
plt.title("Age Distribution")

t_data['Pclass'].value_counts()

sns.countplot(x='Pclass', data=t_data)
plt.title('Distribution of Passenger Classes')

sns.countplot(x='Pclass', hue='Survived', data=t_data)
plt.title("Survival by Passenger Class")

t_data.replace({'Sex':{'male':0,'female':1}, 'Embarked':{'S':0,'C':1,'Q':2}},inplace=True)

"""Splitting train and test data"""

x=t_data.drop(columns= ['PassengerId','Name','Ticket','Survived'],axis=1)
y=t_data['Survived']

print(x)
print(y)

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=42)

"""Logistic Regression Model"""

model=LogisticRegression()

model.fit(x_train,y_train)

x_train_pred=model.predict(x_train)
print(x_train_pred)

training_accuracy=accuracy_score(y_train,x_train_pred)
print('Accuracy score of training data is:',training_accuracy)

x_test_pred=model.predict(x_test)
print(x_test_pred)

test_accuracy=accuracy_score(y_test,x_test_pred)
print('Accuracy score of testing data is:',test_accuracy)

"""The accuracy is measured to be 100%"""